import streamlit as st
import pandas as pd
import sqlite3
from datetime import datetime
from io import BytesIO
import base64
import os
import hashlib
import time
import uuid

# Configura√ß√£o da p√°gina para mobile
st.set_page_config(
    page_title="v.Ferreira - Sistema de Inqu√©ritos",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="auto"
)

# CSS personalizado melhorado
st.markdown("""
    <style>
    /* Ajustes gerais para mobile */
    @media (max-width: 768px) {
        .main .block-container {
            padding-top: 1rem;
            padding-bottom: 1rem;
            padding-left: 1rem;
            padding-right: 1rem;
        }
        
        h1 {
            font-size: 1.8rem !important;
        }
        
        h2 {
            font-size: 1.5rem !important;
        }
        
        h3 {
            font-size: 1.3rem !important;
        }
        
        /* Ajustar sliders para mobile */
        .stSlider {
            width: 100% !important;
        }
        
        /* Ajustar bot√µes para mobile */
        .stButton > button {
            width: 100%;
            margin-bottom: 0.5rem;
        }
        
        /* Ajustar colunas para mobile */
        .stHorizontalBlock > div {
            flex-direction: column;
        }
        
        /* Ajustar tabelas para mobile */
        .dataframe {
            font-size: 0.8rem;
        }
        
        /* Melhorar formul√°rios para mobile */
        .stForm {
            padding: 0.5rem;
        }
        
        /* Agrupar sliders por dimens√£o */
        .dimension-group {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
            border-left: 4px solid #1E90FF;
        }
        
        /* Estilo para bot√µes de sele√ß√£o de formul√°rio */
        .form-selector {
            text-align: center;
            padding: 1.5rem;
            margin: 1rem 0;
            border-radius: 10px;
            background-color: #f0f2f6;
            transition: all 0.3s ease;
        }
        
        .form-selector:hover {
            background-color: #e6e9ef;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
    }
    
    /* Cursor azul para os sliders */
    .stSlider > div > div > div > div {
        background-color: #1E90FF !important;
    }
    
    /* Melhorar a legibilidade dos textos */
    .stMarkdown {
        font-size: 1rem;
        line-height: 1.5;
    }
    
    /* Ajustar os formul√°rios para mobile */
    .stForm {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 1rem;
    }
    
    /* Estilos para as m√©tricas de desempenho */
    .good-performance {
        color: #27ae60;
        font-weight: bold;
    }
    .medium-performance {
        color: #f39c12;
        font-weight: bold;
    }
    .poor-performance {
        color: #e74c3c;
        font-weight: bold;
    }
    
    /* Melhorar visualiza√ß√£o de coment√°rios */
    .comment-box {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        border-left: 4px solid #6c757d;
    }
    </style>
""", unsafe_allow_html=True)

# Fun√ß√£o para hash de senhas
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# Fun√ß√£o para migrar o banco de dados (vers√£o melhorada)
def migrate_db():
    conn = sqlite3.connect('hpo_survey.db')
    c = conn.cursor()
    
    # Verificar se a coluna comentario j√° existe na tabela HPO
    c.execute("PRAGMA table_info(responses)")
    columns = [column[1] for column in c.fetchall()]
    
    if 'comentario' not in columns:
        # Adicionar a coluna comentario se n√£o existir
        c.execute("ALTER TABLE responses ADD COLUMN comentario TEXT")
        print("Banco de dados atualizado com a coluna de coment√°rios para HPO!")
    
    # Verificar se a tabela de lideran√ßa existe
    c.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='lideranca_responses'")
    table_exists = c.fetchone()
    
    if table_exists:
        # Verificar a estrutura atual da tabela
        c.execute("PRAGMA table_info(lideranca_responses)")
        columns = [column[1] for column in c.fetchall()]
        
        # Se a tabela tem a estrutura antiga (com colunas q1, q2, etc.)
        if 'q1' in columns:
            # Criar uma nova tabela com a estrutura desejada
            c.execute('''
                CREATE TABLE lideranca_responses_new (
                    id INTEGER PRIMARY KEY, 
                    session_id TEXT,
                    timestamp DATETIME,
                    question_id TEXT,
                    response TEXT,
                    response_time REAL
                )
            ''')
            
            # Inserir dados da tabela antiga na nova estrutura
            # Como n√£o temos session_id e response_time, vamos usar valores padr√£o
            # E vamos transformar as colunas q1, q2, etc. em linhas
            for i in range(1, 7):
                c.execute(f"""
                    INSERT INTO lideranca_responses_new (session_id, timestamp, question_id, response, response_time)
                    SELECT 
                        'migrated_' || id, 
                        timestamp, 
                        'q{i}', 
                        q{i}, 
                        0.0 
                    FROM lideranca_responses 
                    WHERE q{i} IS NOT NULL
                """)
            
            # Remover a tabela antiga
            c.execute("DROP TABLE lideranca_responses")
            
            # Renomear a nova tabela
            c.execute("ALTER TABLE lideranca_responses_new RENAME TO lideranca_responses")
            
            print("Tabela de lideran√ßa migrada para a nova estrutura!")
        
        else:
            # A tabela existe mas n√£o tem a estrutura antiga, verificar se tem as colunas necess√°rias
            required_columns = ['session_id', 'question_id', 'response', 'response_time']
            missing_columns = [col for col in required_columns if col not in columns]
            
            if missing_columns:
                # Adicionar colunas faltantes
                for col in missing_columns:
                    if col == 'session_id':
                        c.execute("ALTER TABLE lideranca_responses ADD COLUMN session_id TEXT")
                    elif col == 'question_id':
                        c.execute("ALTER TABLE lideranca_responses ADD COLUMN question_id TEXT")
                    elif col == 'response':
                        c.execute("ALTER TABLE lideranca_responses ADD COLUMN response TEXT")
                    elif col == 'response_time':
                        c.execute("ALTER TABLE lideranca_responses ADD COLUMN response_time REAL")
                
                print("Tabela de lideran√ßa atualizada com colunas faltantes!")
    
    else:
        # Criar tabela para respostas de lideran√ßa com a nova estrutura
        c.execute('''
            CREATE TABLE lideranca_responses (
                id INTEGER PRIMARY KEY, 
                session_id TEXT,
                timestamp DATETIME,
                question_id TEXT,
                response TEXT,
                response_time REAL
            )
        ''')
        print("Tabela de lideran√ßa criada com nova estrutura!")
    
    conn.commit()
    conn.close()

# Inicializa√ß√£o do banco de dados
def init_db():
    conn = sqlite3.connect('hpo_survey.db')
    c = conn.cursor()
    
    # Tabela de usu√°rios
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT, role TEXT)''')
    
    # Tabela de respostas HPO (atualizada com campo de coment√°rios)
    c.execute('''CREATE TABLE IF NOT EXISTS responses
                 (id INTEGER PRIMARY KEY, 
                  timestamp DATETIME,
                  a1 INTEGER, a2 INTEGER,
                  b1 INTEGER, b2 INTEGER,
                  c1 INTEGER, c2 INTEGER,
                  d1 INTEGER, d2 INTEGER,
                  e1 INTEGER, e2 INTEGER,
                  f1 INTEGER, f2 INTEGER,
                  g1 INTEGER, g2 INTEGER,
                  comentario TEXT)''')
    
    # Tabela de respostas de Lideran√ßa
    c.execute('''CREATE TABLE IF NOT EXISTS lideranca_responses
                 (id INTEGER PRIMARY KEY, 
                  timestamp DATETIME,
                  q1 TEXT, q2 TEXT, q3 TEXT, 
                  q4 TEXT, q5 TEXT, q6 TEXT,
                  comentario TEXT)''')
    
    # Inserir usu√°rios padr√£o se n√£o existirem (com senhas hasheadas)
    default_users = [
        ('admin', hash_password('admin123'), 'administrador'),
        ('gestor', hash_password('gestor123'), 'gestor')
    ]
    
    for username, password, role in default_users:
        try:
            c.execute("INSERT INTO users (username, password, role) VALUES (?, ?, ?)", 
                     (username, password, role))
        except sqlite3.IntegrityError:
            pass  # Usu√°rio j√° existe
    
    conn.commit()
    conn.close()
    
    # Migrar banco de dados existente
    migrate_db()

# Fun√ß√£o para verificar login
def check_login(username, password):
    conn = sqlite3.connect('hpo_survey.db')
    c = conn.cursor()
    hashed_password = hash_password(password)
    c.execute("SELECT * FROM users WHERE username = ? AND password = ?", (username, hashed_password))
    user = c.fetchone()
    conn.close()
    return user

# Fun√ß√£o para adicionar novo usu√°rio (apenas admin)
def add_user(username, password, role):
    conn = sqlite3.connect('hpo_survey.db')
    c = conn.cursor()
    hashed_password = hash_password(password)
    try:
        c.execute("INSERT INTO users (username, password, role) VALUES (?, ?, ?)", 
                 (username, hashed_password, role))
        conn.commit()
        success = True
    except sqlite3.IntegrityError:
        success = False
    conn.close()
    return success

# Fun√ß√£o para listar usu√°rios (apenas admin)
def list_users():
    conn = sqlite3.connect('hpo_survey.db')
    c = conn.cursor()
    c.execute("SELECT id, username, role FROM users")
    users = c.fetchall()
    conn.close()
    return users

# Fun√ß√£o para excluir usu√°rio (apenas admin)
def delete_user(user_id):
    conn = sqlite3.connect('hpo_survey.db')
    c = conn.cursor()
    c.execute("DELETE FROM users WHERE id = ?", (user_id,))
    conn.commit()
    conn.close()

# Fun√ß√£o para editar usu√°rio (apenas admin)
def edit_user(user_id, new_username=None, new_password=None, new_role=None):
    conn = sqlite3.connect('hpo_survey.db')
    c = conn.cursor()
    success = False
    
    try:
        # Verificar se o usu√°rio existe
        c.execute("SELECT * FROM users WHERE id = ?", (user_id,))
        user = c.fetchone()
        
        if user:
            # Construir a query dinamicamente baseada nos campos fornecidos
            update_fields = []
            params = []
            
            if new_username is not None:
                update_fields.append("username = ?")
                params.append(new_username)
            
            if new_password is not None:
                update_fields.append("password = ?")
                params.append(hash_password(new_password))
            
            if new_role is not None:
                update_fields.append("role = ?")
                params.append(new_role)
            
            if update_fields:
                # Adicionar o user_id aos par√¢metros
                params.append(user_id)
                
                # Executar a atualiza√ß√£o
                query = f"UPDATE users SET {', '.join(update_fields)} WHERE id = ?"
                c.execute(query, params)
                conn.commit()
                success = True
        
    except sqlite3.Error as e:
        print(f"Erro ao editar usu√°rio: {e}")
        success = False
    
    finally:
        conn.close()
    
    return success

# Fun√ß√£o para buscar informa√ß√µes de um usu√°rio espec√≠fico
def get_user(user_id):
    conn = sqlite3.connect('hpo_survey.db')
    c = conn.cursor()
    c.execute("SELECT id, username, role FROM users WHERE id = ?", (user_id,))
    user = c.fetchone()
    conn.close()
    return user   

# Fun√ß√£o para resetar completamente o sistema (apenas admin)
def reset_entire_system():
    try:
        # Apagar todas as respostas
        delete_all_responses()
        
        # Limpar cache do Streamlit para for√ßar rec√°lculo de todas as estat√≠sticas
        st.cache_data.clear()
        
        # Recriar o banco de dados para garantir limpeza completa
        init_db()
        
        return True
    except Exception as e:
        st.error(f"Erro durante o reset: {str(e)}")
        return False

# Fun√ß√£o para apagar todas as respostas (apenas admin)
def delete_all_responses():
    conn = sqlite3.connect('hpo_survey.db')
    c = conn.cursor()
    c.execute("DELETE FROM responses")
    c.execute("DELETE FROM lideranca_responses")
    conn.commit()
    conn.close()

# Fun√ß√£o para salvar resposta do question√°rio HPO
def save_hpo_response(responses, comentario=""):
    conn = sqlite3.connect('hpo_survey.db')
    c = conn.cursor()
    
    c.execute('''INSERT INTO responses 
                 (timestamp, a1, a2, b1, b2, c1, c2, d1, d2, e1, e2, f1, f2, g1, g2, comentario)
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                 (datetime.now(),) + tuple(responses) + (comentario,))
    
    conn.commit()
    conn.close()

# Fun√ß√£o para salvar resposta do question√°rio de Lideran√ßa
def save_lideranca_response(session_id, question_data):
    conn = sqlite3.connect('hpo_survey.db')
    c = conn.cursor()
    
    # Inserir cada resposta individualmente
    for i, (question_id, response, response_time) in enumerate(question_data, 1):
        c.execute('''INSERT INTO lideranca_responses 
                     (session_id, timestamp, question_id, response, response_time)
                     VALUES (?, ?, ?, ?, ?)''',
                     (session_id, datetime.now(), f"q{i}", response, response_time))
    
    conn.commit()
    conn.close()

# Fun√ß√£o para carregar todas as respostas HPO
def load_hpo_responses():
    conn = sqlite3.connect('hpo_survey.db')
    
    # Verificar se a coluna comentario existe
    c = conn.cursor()
    c.execute("PRAGMA table_info(responses)")
    columns = [column[1] for column in c.fetchall()]
    
    if 'comentario' not in columns:
        # Se a coluna n√£o existir, criar uma coluna dummy
        df = pd.read_sql_query("SELECT * FROM responses", conn)
        df['comentario'] = ''  # Adicionar coluna vazia
    else:
        df = pd.read_sql_query("SELECT * FROM responses", conn)
    
    conn.close()
    return df

# Fun√ß√£o para carregar todas as respostas de Lideran√ßa (modificada)
def load_lideranca_responses():
    conn = sqlite3.connect('hpo_survey.db')
    df = pd.read_sql_query("SELECT * FROM lideranca_responses", conn)
    conn.close()
    return df

# Fun√ß√£o para calcular estat√≠sticas HPO
def calculate_hpo_stats(df):
    if df.empty:
        return None, None, None, None
    
    # Calcular totais por dimens√£o (soma das duas quest√µes, m√°ximo de 14 pontos)
    dimensions = {
        'A. Informa√ß√£o partilhada e comunica√ß√£o aberta': ['a1', 'a2'],
        'B. Vis√£o forte: objetivo e valores': ['b1', 'b2'],
        'C. Aprendizagem cont√≠nua': ['c1', 'c2'],
        'D. Focaliza√ß√£o constante nos resultados dos clientes': ['d1', 'd2'],
        'E. Sistemas e estruturas en√©rgicos': ['e1', 'e2'],
        'F. Poder partilhado e envolvimento elevado': ['f1', 'f2'],
        'G. Lideran√ßa': ['g1', 'g2']
    }
    
    # Calcular totais por dimens√£o para cada resposta
    dimension_totals = {}
    for dim, cols in dimensions.items():
        dimension_totals[dim] = df[cols].sum(axis=1)
    
    # Calcular m√©dias dos totais por dimens√£o
    stats = {}
    for dim, totals in dimension_totals.items():
        stats[dim] = totals.mean()
    
    # Classificar o desempenho por dimens√£o
    performance = {}
    for dim, avg_total in stats.items():
        if avg_total >= 12:
            performance[dim] = "Elevado desempenho"
        elif avg_total >= 9:
            performance[dim] = "M√©dio"
        else:
            performance[dim] = "Oportunidade de melhoria"
    
    # Calcular desempenho geral da organiza√ß√£o
    overall_avg = sum(stats.values()) / len(stats)
    if overall_avg >= 12:
        overall_performance = "Elevado desempenho"
    elif overall_avg >= 9:
        overall_performance = "M√©dio"
    else:
        overall_performance = "Oportunidade de melhoria"
    
    return stats, performance, overall_performance, dimension_totals

# Fun√ß√£o para calcular estat√≠sticas de Lideran√ßa (modificada)
def calculate_lideranca_stats(df):
    if df.empty:
        return None, None
    
    # Respostas corretas (baseadas no documento)
    correct_answers = {
        'q1': 'b',
        'q2': 'a',
        'q3': 'a',
        'q4': 'b',
        'q5': 'a',
        'q6': 'b'
    }
    
    # Calcular pontua√ß√£o por quest√£o
    question_stats = {}
    for q, correct in correct_answers.items():
        question_df = df[df['question_id'] == q]
        if not question_df.empty:
            correct_count = (question_df['response'] == correct).sum()
            total_count = question_df['response'].count()
            accuracy = (correct_count / total_count * 100) if total_count > 0 else 0
            
            # Calcular tempo m√©dio de resposta
            avg_time = question_df['response_time'].mean()
            
            question_stats[q] = {
                'corretas': correct_count,
                'total': total_count,
                'acuracia': accuracy,
                'tempo_medio': avg_time
            }
    
    # Calcular pontua√ß√£o geral
    total_correct = sum(stats['corretas'] for stats in question_stats.values())
    total_questions = sum(stats['total'] for stats in question_stats.values()) if question_stats else 0
    overall_accuracy = (total_correct / (total_questions / 6) * 100) if total_questions > 0 else 0
    
    return question_stats, overall_accuracy

# Fun√ß√£o para criar visualiza√ß√£o de dados HPO nativa do Streamlit
def display_hpo_stats(stats, performance):
    # Criar DataFrame para exibi√ß√£o
    stats_df = pd.DataFrame({
        'Dimens√£o': list(stats.keys()),
        'Pontua√ß√£o M√©dia': [f"{v:.2f}/14" for v in stats.values()],
        'Desempenho': list(performance.values())
    })
    
    # Exibir tabela com formata√ß√£o condicional
    for idx, row in stats_df.iterrows():
        col1, col2, col3 = st.columns([4, 2, 2])
        with col1:
            st.write(f"**{row['Dimens√£o']}**")
        with col2:
            st.write(row['Pontua√ß√£o M√©dia'])
        with col3:
            if row['Desempenho'] == "Elevado desempenho":
                st.markdown(f'<span class="good-performance">{row["Desempenho"]}</span>', unsafe_allow_html=True)
            elif row['Desempenho'] == "M√©dio":
                st.markdown(f'<span class="medium-performance">{row["Desempenho"]}</span>', unsafe_allow_html=True)
            else:
                st.markdown(f'<span class="poor-performance">{row["Desempenho"]}</span>', unsafe_allow_html=True)
    
    return stats_df

# Fun√ß√£o para criar visualiza√ß√£o de dados de Lideran√ßa (modificada)
def display_lideranca_stats(question_stats, overall_accuracy):
    st.metric("Pontua√ß√£o Geral", f"{overall_accuracy:.1f}%")
    
    # Definir textos das quest√µes
    question_texts = {
        'q1': "1. Liderar a um n√≠vel superior significa:",
        'q2': "2. Valores da Lideran√ßa:",
        'q3': "3. Os Tr√™s Resultados de uma organiza√ß√£o com elevado desempenho s√£o:",
        'q4': "4. A chave para delega√ß√£o de poderes √©:",
        'q5': "5. Os quatro estilos b√°sicos de lideran√ßa no modelo de Lideran√ßa Situacional s√£o:",
        'q6': "6. Comportamentos de apoio em Equipa s√£o:"
    }
    
    # Exibir estat√≠sticas por quest√£o
    for q, stats in question_stats.items():
        with st.expander(question_texts.get(q, q)):
            st.write(f"Respostas corretas: {stats['corretas']}/{stats['total']}")
            st.write(f"Taxa de acerto: {stats['acuracia']:.1f}%")
            st.write(f"Tempo m√©dio de resposta: {stats['tempo_medio']:.1f} segundos")
            st.progress(stats['acuracia'] / 100)

# Fun√ß√£o para criar gr√°fico de barras HPO usando native Streamlit chart
def create_hpo_chart(stats):
    chart_data = pd.DataFrame({
        'Dimens√£o': list(stats.keys()),
        'Pontua√ß√£o M√©dia': list(stats.values())
    })
    
    st.bar_chart(chart_data.set_index('Dimens√£o'), height=400)

# Fun√ß√£o para mostrar distribui√ß√£o de respostas HPO
def show_hpo_distribution(df):
    # Remover colunas n√£o num√©ricas
    numeric_columns = [col for col in df.columns if col not in ['id', 'timestamp', 'comentario']]
    all_responses = df[numeric_columns].values.flatten()
    
    # Criar DataFrame para o gr√°fico
    dist_data = pd.Series(all_responses).value_counts().sort_index()
    dist_df = pd.DataFrame({
        'Pontua√ß√£o': dist_data.index,
        'Frequ√™ncia': dist_data.values
    })
    
    st.bar_chart(dist_df.set_index('Pontua√ß√£o'), height=300)

# Fun√ß√£o para gerar relat√≥rio HPO em HTML simplificado
def generate_hpo_html_report(stats, performance, overall_performance, df):
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Relat√≥rio HPO - An√°lise de Desempenho</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; }}
            h1 {{ color: #2c3e50; font-size: 1.8rem; }}
            h2 {{ color: #34495e; border-bottom: 2px solid #3498db; padding-bottom: 5px; font-size: 1.5rem; }}
            table {{ border-collapse: collapse; width: 100%; margin-bottom: 20px; font-size: 0.9rem; }}
            th, td {{ border: 1px solid #ddd; padding: 10px; text-align: left; }}
            th {{ background-color: #3498db; color: white; }}
            tr:nth-child(even) {{ background-color: #f2f2f2; }}
            .summary-item {{ margin: 10px 0; }}
            .good {{ color: #27ae60; }}
            .medium {{ color: #f39c12; }}
            .poor {{ color: #e74c3c; }}
            .info {{ background-color: #e8f4fc; padding: 15px; border-radius: 5px; margin: 20px 0; }}
            .comentario {{ background-color: #f9f9f9; padding: 15px; border-left: 4px solid #3498db; margin: 10px 0; }}
            @media (max-width: 768px) {{
                body {{ margin: 10px; }}
                h1 {{ font-size: 1.5rem; }}
                h2 {{ font-size: 1.3rem; }}
                table {{ font-size: 0.8rem; }}
                th, td {{ padding: 8px; }}
            }}
        </style>
    </head>
    <body>
        <h1>Relat√≥rio HPO - An√°lise de Desempenho</h1>
        <p><strong>Gerado em:</strong> {datetime.now().strftime('%d/%m/%Y %H:%M')}</p>
        
        <div class="info">
            <h2>Desempenho Geral</h2>
            <h3>{overall_performance}</h3>
        </div>
        
        <h2>Resultados por Dimens√£o</h2>
        <table>
            <tr>
                <th>Dimens√£o</th>
                <th>Pontua√ß√£o M√©dia</th>
                <th>Desempenho</th>
            </tr>
    """
    
    for dim, avg_total in stats.items():
        perf_class = ""
        if performance[dim] == "Elevado desempenho":
            perf_class = "good"
        elif performance[dim] == "M√©dio":
            perf_class = "medium"
        else:
            perf_class = "poor"
            
        html_content += f"""
            <tr>
                <td>{dim}</td>
                <td>{avg_total:.2f}/14</td>
                <td class="{perf_class}">{performance[dim]}</td>
            </tr>
        """
    
    html_content += """
        </table>
        
        <h2>Resumo Executivo</h2>
    """
    
    for dim, perf in performance.items():
        emoji = "‚úÖ" if perf == "Elevado desempenho" else "‚ö†Ô∏è" if perf == "M√©dio" else "‚ùå"
        perf_class = "good" if perf == "Elevado desempenho" else "medium" if perf == "M√©dio" else "poor"
        
        html_content += f"""
        <div class="summary-item {perf_class}">
            {emoji} <strong>{dim}</strong>: {perf}
        </div>
        """
    
    # Coment√°rios dos participantes (se houver)
    if 'comentario' in df.columns:
        comentarios_df = df[df['comentario'].notna() & (df['comentario'] != '')]
        if not comentarios_df.empty:
            html_content += """
            <h2>Coment√°rios dos Participantes</h2>
            """
            
            for idx, row in comentarios_df.iterrows():
                html_content += f"""
                <div class="comentario">
                    <strong>{row['timestamp']}:</strong><br>
                    {row['comentario']}
                </div>
                """
    
    html_content += f"""
        <h2>Informa√ß√µes Adicionais</h2>
        <p><strong>Total de respostas:</strong> {len(df)}</p>
    """
    
    if 'comentario' in df.columns:
        comentarios_df = df[df['comentario'].notna() & (df['comentario'] != '')]
        html_content += f"""
        <p><strong>Total de coment√°rios:</strong> {len(comentarios_df)}</p>
        """
    
    html_content += f"""
        <p><strong>Per√≠odo das respostas:</strong> {df['timestamp'].min()} a {df['timestamp'].max()}</p>
    </body>
    </html>
    """
    
    return html_content.encode('utf-8')

# Fun√ß√£o para gerar relat√≥rio de Lideran√ßa em HTML (modificada)
def generate_lideranca_html_report(question_stats, overall_accuracy, df):
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Relat√≥rio de Lideran√ßa - An√°lise de Desempenho</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            body {{ font-family: Arial, sans-serif; margin: 20px; }}
            h1 {{ color: #2c3e50; font-size: 1.8rem; }}
            h2 {{ color: #34495e; border-bottom: 2px solid #3498db; padding-bottom: 5px; font-size: 1.5rem; }}
            table {{ border-collapse: collapse; width: 100%; margin-bottom: 20px; font-size: 0.9rem; }}
            th, td {{ border: 1px solid #ddd; padding: 10px; text-align: left; }}
            th {{ background-color: #3498db; color: white; }}
            tr:nth-child(even) {{ background-color: #f2f2f2; }}
            .summary-item {{ margin: 10px 0; }}
            .good {{ color: #27ae60; }}
            .medium {{ color: #f39c12; }}
            .poor {{ color: #e74c3c; }}
            .info {{ background-color: #e8f4fc; padding: 15px; border-radius: 5px; margin: 20px 0; }}
            @media (max-width: 768px) {{
                body {{ margin: 10px; }}
                h1 {{ font-size: 1.5rem; }}
                h2 {{ font-size: 1.3rem; }}
                table {{ font-size: 0.8rem; }}
                th, td {{ padding: 8px; }}
            }}
        </style>
    </head>
    <body>
        <h1>Relat√≥rio de Lideran√ßa - An√°lise de Desempenho</h1>
        <p><strong>Gerado em:</strong> {datetime.now().strftime('%d/%m/%Y %H:%M')}</p>
        
        <div class="info">
            <h2>Desempenho Geral</h2>
            <h3>{overall_accuracy:.1f}% de acerto</h3>
        </div>
        
        <h2>Resultados por Quest√£o</h2>
        <table>
            <tr>
                <th>Quest√£o</th>
                <th>Respostas Corretas</th>
                <th>Taxa de Acerto</th>
                <th>Tempo M√©dio (segundos)</th>
            </tr>
    """
    
    # Definir textos das quest√µes
    question_texts = {
        'q1': "1. Liderar a um n√≠vel superior significa:",
        'q2': "2. Valores da Lideran√ßa:",
        'q3': "3. Os Tr√™s Resultados de uma organiza√ß√£o com elevado desempenho s√£o:",
        'q4': "4. A chave para delega√ß√£o de poderes √©:",
        'q5': "5. Os quatro estilos b√°sicos de lideran√ßa no modelo de Lideran√ßa Situacional s√£o:",
        'q6': "6. Comportamentos de apoio em Equipa s√£o:"
    }
    
    for q, stats in question_stats.items():
        html_content += f"""
            <tr>
                <td>{question_texts.get(q, q)}</td>
                <td>{stats['corretas']}/{stats['total']}</td>
                <td>{stats['acuracia']:.1f}%</td>
                <td>{stats['tempo_medio']:.1f}</td>
            </tr>
        """
    
    html_content += """
        </table>
    """
    
    html_content += f"""
        <h2>Informa√ß√µes Adicionais</h2>
        <p><strong>Total de sess√µes completadas:</strong> {df['session_id'].nunique()}</p>
        <p><strong>Total de respostas:</strong> {len(df)}</p>
        <p><strong>Per√≠odo das respostas:</strong> {df['timestamp'].min()} a {df['timestamp'].max()}</p>
    </body>
    </html>
    """
    
    return html_content.encode('utf-8')

# P√°gina de login
def login_page():
    st.title("üìä EPEC - Sistema de Inqu√©ritos")
    st.subheader("Login")
    
    # Op√ß√£o para trabalhador
    if st.button("Sou Trabalhador (Clicar)", use_container_width=True):
        st.session_state.logged_in = True
        st.session_state.role = "trabalhador"
        st.session_state.form_type = None  # Resetar sele√ß√£o de formul√°rio
        st.rerun()
    
    # Formul√°rio de login para admin/gestor
    with st.form("login_form"):
        username = st.text_input("Username")
        password = st.text_input("Password", type="password")
        submitted = st.form_submit_button("Login", use_container_width=True)
        
        if submitted:
            user = check_login(username, password)
            if user:
                st.session_state.logged_in = True
                st.session_state.user_id = user[0]
                st.session_state.username = user[1]
                st.session_state.role = user[3]
                st.rerun()
            else:
                st.error("Username ou password incorretos")

# P√°gina de sele√ß√£o de formul√°rio para trabalhador
def form_selection_page():
    st.title("EPEC - Sele√ß√£o de Question√°rio")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown('<div class="form-selector">', unsafe_allow_html=True)
        st.subheader("Question√°rio HPO")
        st.write("Avalia√ß√£o das pr√°ticas de alta performance organizacional")
        if st.button("Selecionar HPO", key="hpo_btn", use_container_width=True):
            st.session_state.form_type = "hpo"
            st.rerun()
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="form-selector">', unsafe_allow_html=True)
        st.subheader("Question√°rio de Lideran√ßa")
        st.write("Avalia√ß√£o de conhecimentos sobre lideran√ßa")
        if st.button("Selecionar Lideran√ßa", key="lideranca_btn", use_container_width=True):
            st.session_state.form_type = "lideranca"
            st.rerun()
        st.markdown('</div>', unsafe_allow_html=True)

# P√°gina do question√°rio HPO para trabalhador
def survey_hpo_page():
    st.title("EPEC - Question√°rio HPO")    
    st.info("""
     **Escala de 1 a 7: **
     - 1 - Discordo Totalmente
     - 2 - Discordo
     - 3 - Discordo Pouco
     - 4 - Neutro
     - 5 - Concordo Pouco
     - 6 - Concordo
     - 7 - Concordo Totalmente
     """)

    st.write("Por favor, responda √†s seguintes quest√µes com base na sua experi√™ncia na organiza√ß√£o.")
    st.info("Nota: Cada dimens√£o recebe uma pontua√ß√£o total de at√© 14 pontos (7 pontos por quest√£o).")
    
    # Verificar se j√° foi submetido para mostrar mensagem de confirma√ß√£o
    if 'submitted' in st.session_state and st.session_state.submitted:
        st.success("""
        ‚úÖ **Question√°rio submetido com sucesso!**
        
        Obrigado pela sua participa√ß√£o. A sua opini√£o √© muito importante para n√≥s.
        """)
        
        # Bot√£o para preencher novo question√°rio
        if st.button("Preencher novo question√°rio"):
            st.session_state.submitted = False
            st.session_state.form_type = None
            st.rerun()
            
        return
    
    with st.form("survey_form"):
        # Agrupar quest√µes por dimens√£o para melhor organiza√ß√£o
        dimensions = [
            {
                "title": "A. Informa√ß√£o partilhada e comunica√ß√£o aberta",
                "questions": [
                    "1. Os colaboradores t√™m facilmente acesso √† informa√ß√£o de que necessitam para realizar o seu trabalho com efic√°cia.",
                    "2. Os planos e decis√µes s√£o comunicados de forma a serem claramente compreendidos."
                ]
            },
            {
                "title": "B. Vis√£o forte: objetivo e valores",
                "questions": [
                    "1. Na sua organiza√ß√£o, a lideran√ßa est√° alinhada com uma vis√£o e valores partilhados.",
                    "2. Na sua organiza√ß√£o, os colaboradores t√™m paix√£o por um objetivo e valores partilhados."
                ]
            },
            {
                "title": "C. Aprendizagem cont√≠nua",
                "questions": [
                    "1. Na sua organiza√ß√£o, os colaboradores s√£o apoiados ativamente no desenvolvimento de novas capacidades e compet√™ncias.",
                    "2. A sua organiza√ß√£o incorpora continuamente novas aprendizagens no modo habitual de fazer neg√≥cios."
                ]
            },
            {
                "title": "D. Focaliza√ß√£o constante nos resultados dos clientes",
                "questions": [
                    "1. Todos na sua organiza√ß√£o mant√™m os mais elevados crit√©rios de qualidade e servi√ßo.",
                    "2. Todos os processos de trabalho s√£o elaborados de forma a facilitar aos seus clientes fazer neg√≥cios consigo."
                ]
            },
            {
                "title": "E. Sistemas e estruturas en√©rgicos",
                "questions": [
                    "1. Os sistemas, estruturas e pr√°ticas formais e informais est√£o integrados e alinhados uns com os outros.",
                    "2. Na sua organiza√ß√£o, os sistemas, estruturas e pr√°ticas formais e informais facilitar os colaboradores a realiza√ß√£o do seu trabalho."
                ]
            },
            {
                "title": "F. Poder partilhado e envolvimento elevado",
                "questions": [
                    "1. Todos t√™m a oportunidade de influenciar as decis√µes que os afetam.",
                    "2. As equipas s√£o utilizadas como um ve√≠culo para a realiza√ß√£o de trabalho e influenciar decis√µes."
                ]
            },
            {
                "title": "G. Lideran√ßa",
                "questions": [
                    "1. Os L√≠deres acreditam que liderar √© servir e n√£o ser servido.",
                    "2. Os l√≠deres removem obst√°culos de forma a ajudar os colaboradores a concentraren-se no seu trabalho e nos seus clientes."
                ]
            }
        ]
        
        responses = []
        for i, dimension in enumerate(dimensions):
            st.markdown(f'<div class="dimension-group">', unsafe_allow_html=True)
            st.subheader(dimension["title"])
            
            for j, question in enumerate(dimension["questions"]):
                # Usar uma chave √∫nica para cada slider
                key = f"{chr(97+i)}{j+1}"
                value = st.slider(question, 1, 7, 4, key=key)
                responses.append(value)
            
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Campo de coment√°rio
        st.subheader("Coment√°rios Adicionais")
        comentario = st.text_area("Tem algum coment√°rio ou sugest√£o adicional que gostaria de partilhar? (opcional)", 
                                 height=100, 
                                 placeholder="Partilhe aqui os seus pensamentos, sugest√µes ou observa√ß√µes adicionais...",
                                 key="comentario")
        
        submitted = st.form_submit_button("Submeter Question√°rio", use_container_width=True)
        
        if submitted:
            save_hpo_response(responses, comentario)
            st.session_state.submitted = True
            st.rerun()

# P√°gina do question√°rio de Lideran√ßa para trabalhador (modificada)
def survey_lideranca_page():
    st.title("EPEC - Question√°rio de Lideran√ßa")
    st.info("""
    **Instru√ß√µes:**
    Para cada quest√£o, selecione a op√ß√£o que considera correta.
    O tempo de resposta para cada pergunta ser√° registrado.
    """)
    
    # Inicializar estado da sess√£o se n√£o existir
    if 'lideranca_session_id' not in st.session_state:
        st.session_state.lideranca_session_id = str(uuid.uuid4())
        st.session_state.lideranca_current_question = 0
        st.session_state.lideranca_responses = []
        st.session_state.lideranca_start_time = time.time()
        st.session_state.lideranca_completed = False
    
    # Verificar se j√° foi conclu√≠do
    if st.session_state.lideranca_completed:
        st.success("""
        ‚úÖ **Question√°rio conclu√≠do com sucesso!**
        
        Obrigado pela sua participa√ß√£o. A sua opini√£o √© muito importante para n√≥s.
        """)
        
        # Bot√£o para preencher novo question√°rio
        if st.button("Preencher novo question√°rio"):
            st.session_state.lideranca_session_id = str(uuid.uuid4())
            st.session_state.lideranca_current_question = 0
            st.session_state.lideranca_responses = []
            st.session_state.lideranca_start_time = time.time()
            st.session_state.lideranca_completed = False
            st.session_state.form_type = None
            st.rerun()
            
        return
    
    # Definir perguntas
    questions = [
        {
            "question": "1. Liderar a um n√≠vel superior significa:",
            "options": [
                "a. Agir em proveito de si pr√≥prio",
                "b. Agir em proveito dos outros"
            ]
        },
        {
            "question": "2. Valores da Lideran√ßa:",
            "options": [
                "a. √âtica, Rela√ß√µes, Sucesso e Aprendizagem",
                "b. √âtica, Autoridade, Dinheiro e Padr√£o"
            ]
        },
        {
            "question": "3. Os Tr√™s Resultados de uma organiza√ß√£o com elevado desempenho s√£o:",
            "options": [
                "a. Fornecedor preferencial, empregador preferencial e Investimento preferencial",
                "b. Fornecedor preferencial, empregador preferencial e Investigador preferencial"
            ]
        },
        {
            "question": "4. A chave para delega√ß√£o de poderes √©:",
            "options": [
                "a. Ter mais poder",
                "b. Libertar esse poder"
            ]
        },
        {
            "question": "5. Os quatro estilos b√°sicos de lideran√ßa no modelo de Lideran√ßa Situacional s√£o:",
            "options": [
                "a. Dire√ß√£o, Coaching, Apoio e Delega√ß√£o",
                "b. Dire√ß√£o, Coaching, Apoio e Autoridade"
            ]
        },
        {
            "question": "6. Comportamentos de apoio em Equipa s√£o:",
            "options": [
                "a. Organizar, educar, centrar e estruturar",
                "b. Elogiar, envolver, ouvir e encorajar"
            ]
        }
    ]
    
    # Obter pergunta atual
    current_question_idx = st.session_state.lideranca_current_question
    current_question = questions[current_question_idx]
    
    # Exibir progresso
    st.progress((current_question_idx + 1) / len(questions))
    st.write(f"Pergunta {current_question_idx + 1} de {len(questions)}")
    
    # Exibir pergunta atual
    st.subheader(current_question["question"])
    
    # Formul√°rio para resposta atual
    with st.form(f"question_{current_question_idx}"):
        response = st.radio(
            "Selecione a op√ß√£o correta:",
            options=["a", "b"],
            format_func=lambda x: next(opt for opt in current_question["options"] if opt.startswith(x)),
            key=f"q{current_question_idx}",
            index=None
        )
        
        submitted = st.form_submit_button("Submeter Resposta", use_container_width=True)
        
        if submitted:
            if response is None:
                st.error("Por favor, selecione uma op√ß√£o antes de submeter.")
            else:
                # Calcular tempo de resposta
                response_time = time.time() - st.session_state.lideranca_start_time
                
                # Armazenar resposta
                st.session_state.lideranca_responses.append(
                    (f"q{current_question_idx + 1}", response, response_time)
                )
                
                # Verificar se √© a √∫ltima pergunta
                if current_question_idx + 1 >= len(questions):
                    # Salvar todas as respostas
                    save_lideranca_response(
                        st.session_state.lideranca_session_id,
                        st.session_state.lideranca_responses
                    )
                    st.session_state.lideranca_completed = True
                else:
                    # Preparar pr√≥xima pergunta
                    st.session_state.lideranca_current_question += 1
                    st.session_state.lideranca_start_time = time.time()
                
                st.rerun()

# P√°gina de gest√£o para gestores
def manager_page():
    st.title("Painel de Gest√£o")
    
    tab1, tab2, tab3 = st.tabs(["Estat√≠sticas HPO", "Estat√≠sticas Lideran√ßa", "Relat√≥rios"])
    
    with tab1:
        st.subheader("Estat√≠sticas das Respostas - Protocolo HPO")
        st.info("""
        **Protocolo de Pontua√ß√£o:**
        - Pontua√ß√£o 12 - 14 = Elevado desempenho
        - Pontua√ß√£o 9 - 11 = M√©dio
        - Pontua√ß√£o igual ou inferior a 8 = Oportunidade de melhoria
        """)
        
        df = load_hpo_responses()
        
        if not df.empty:
            stats, performance, overall_performance, _ = calculate_hpo_stats(df)
            
            # Gr√°fico de barras nativo do Streamlit
            st.subheader("Desempenho por Dimens√£o")
            create_hpo_chart(stats)
            
            # Tabela de pontua√ß√µes e desempenho
            st.subheader("Pontua√ß√µes e Desempenho por Dimens√£o")
            display_hpo_stats(stats, performance)
            
            # Desempenho geral
            st.subheader("Desempenho Geral da Organiza√ß√£o")
            st.metric("Classifica√ß√£o Geral", overall_performance)
            
            # Distribui√ß√£o das respostas
            st.subheader("Distribui√ß√£o das Respostas Individuais")
            show_hpo_distribution(df)
            
            # Coment√°rios
            if 'comentario' in df.columns:
                comentarios_df = df[df['comentario'].notna() & (df['comentario'] != '')]
                if not comentarios_df.empty:
                    st.subheader("Coment√°rios dos Participantes")
                    for idx, row in comentarios_df.iterrows():
                        with st.expander(f"Coment√°rio de {row['timestamp']}"):
                            st.markdown(f'<div class="comment-box">{row["comentario"]}</div>', unsafe_allow_html=True)
            else:
                st.info("Coluna de coment√°rios n√£o dispon√≠vel no banco de dados.")
            
        else:
            st.info("Ainda n√£o existem respostas HPO para analisar.")
    
    with tab2:
        st.subheader("Estat√≠sticas das Respostas - Question√°rio de Lideran√ßa")
        
        df = load_lideranca_responses()
        
        if not df.empty:
            question_stats, overall_accuracy = calculate_lideranca_stats(df)
            
            st.subheader("Desempenho Geral")
            display_lideranca_stats(question_stats, overall_accuracy)
            
            # Coment√°rios
            if 'comentario' in df.columns:
                comentarios_df = df[df['comentario'].notna() & (df['comentario'] != '')]
                if not comentarios_df.empty:
                    st.subheader("Coment√°rios dos Participantes")
                    for idx, row in comentarios_df.iterrows():
                        with st.expander(f"Coment√°rio de {row['timestamp']}"):
                            st.markdown(f'<div class="comment-box">{row["comentario"]}</div>', unsafe_allow_html=True)
            
        else:
            st.info("Ainda n√£o existem respostas de Lideran√ßa para analisar.")
    
    with tab3:
        st.subheader("Relat√≥rios de An√°lise")
        
        report_type = st.radio("Selecione o tipo de relat√≥rio:", 
                              ["HPO", "Lideran√ßa"],
                              horizontal=True)
        
        if report_type == "HPO":
            df = load_hpo_responses()
            
            if not df.empty:
                stats, performance, overall_performance, _ = calculate_hpo_stats(df)
                
                st.info("Gere relat√≥rios detalhados com a an√°lise completa dos dados do inqu√©rito HPO.")
                
                st.subheader("Relat√≥rio em HTML")
                st.write("Relat√≥rio completo em formato HTML para visualiza√ß√£o no navegador.")
                
                html_report = generate_hpo_html_report(stats, performance, overall_performance, df)
                
                st.download_button(
                    label="Descarregar Relat√≥rio HPO",
                    data=html_report,
                    file_name="relatorio_hpo.html",
                    mime="text/html",
                    use_container_width=True
                )
                
                # Visualiza√ß√£o pr√©via do relat√≥rio
                st.subheader("Pr√©-visualiza√ß√£o do Relat√≥rio")
                with st.expander("Clique para ver a pr√©-visualiza√ß√£o do relat√≥rio"):
                    # Mostrar uma vers√£o simplificada do relat√≥rio
                    st.markdown(f"### Relat√≥rio HPO - An√°lise de Desempenho")
                    st.markdown(f"**Gerado em:** {datetime.now().strftime('%d/%m/%Y %H:%M')}")
                    st.markdown(f"**Total de respostas:** {len(df)}")
                    
                    if 'comentario' in df.columns:
                        comentarios_df = df[df['comentario'].notna() & (df['comentario'] != '')]
                        st.markdown(f"**Total de coment√°rios:** {len(comentarios_df)}")
                    
                    st.markdown("#### Desempenho Geral")
                    st.markdown(f"**{overall_performance}**")
                    
                    st.markdown("#### Resultados por Dimens√£o")
                    for dim, avg_total in stats.items():
                        perf_class = ""
                        if performance[dim] == "Elevado desempenho":
                            perf_class = "good-performance"
                        elif performance[dim] == "M√©dio":
                            perf_class = "medium-performance"
                        else:
                            perf_class = "poor-performance"
                        
                        st.markdown(f"- **{dim}**: {avg_total:.2f}/14 - <span class='{perf_class}'>{performance[dim]}</span>", unsafe_allow_html=True)
            
            else:
                st.info("Ainda n√£o existem respostas HPO para gerar relat√≥rios.")
        
        else:  # Lideran√ßa
            df = load_lideranca_responses()
            
            if not df.empty:
                question_stats, overall_accuracy = calculate_lideranca_stats(df)
                
                st.info("Gere relat√≥rios detalhados com a an√°lise completa dos dados do inqu√©rito de Lideran√ßa.")
                
                st.subheader("Relat√≥rio em HTML")
                st.write("Relat√≥rio completo em formato HTML para visualiza√ß√£o no navegador.")
                
                html_report = generate_lideranca_html_report(question_stats, overall_accuracy, df)
                
                st.download_button(
                    label="Descarregar Relat√≥rio de Lideran√ßa",
                    data=html_report,
                    file_name="relatorio_lideranca.html",
                    mime="text/html",
                    use_container_width=True
                )
                
                # Visualiza√ß√£o pr√©via do relat√≥rio
                st.subheader("Pr√©-visualiza√ß√£o do Relat√≥rio")
                with st.expander("Clique para ver a pr√©-visualiza√ß√£o do relat√≥rio"):
                    # Mostrar uma vers√£o simplificada do relat√≥rio
                    st.markdown(f"### Relat√≥rio de Lideran√ßa - An√°lise de Desempenho")
                    st.markdown(f"**Gerado em:** {datetime.now().strftime('%d/%m/%Y %H:%M')}")
                    st.markdown(f"**Total de respostas:** {len(df)}")
                    
                    if 'comentario' in df.columns:
                        comentarios_df = df[df['comentario'].notna() & (df['comentario'] != '')]
                        st.markdown(f"**Total de coment√°rios:** {len(comentarios_df)}")
                    
                    st.markdown("#### Desempenho Geral")
                    st.markdown(f"**{overall_accuracy:.1f}% de acerto**")
                    
                    st.markdown("#### Resultados por Quest√£o")
                    for q, stats in question_stats.items():
                        st.markdown(f"- **Quest√£o {q}**: {stats['corretas']}/{stats['total']} ({stats['acuracia']:.1f}%)")
            
            else:
                st.info("Ainda n√£o existem respostas de Lideran√ßa para gerar relat√≥rios.")

# P√°gina de administra√ß√£o
def admin_page():
    st.title("Painel de Administra√ß√£o")
    
    # Inicializar estados da sess√£o se n√£o existirem
    if 'refresh_needed' not in st.session_state:
        st.session_state.refresh_needed = False
    if 'user_to_delete' not in st.session_state:
        st.session_state.user_to_delete = None
    if 'editing_users' not in st.session_state:
        st.session_state.editing_users = {}
    
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["Gest√£o de Utilizadores", "Estat√≠sticas HPO", "Estat√≠sticas Lideran√ßa", "Relat√≥rios", "Manuten√ß√£o"])
    
    with tab1:
        st.subheader("Gest√£o de Utilizadores")
        
        # Adicionar novo usu√°rio
        with st.expander("Adicionar Novo Utilizador"):
            with st.form("add_user_form"):
                new_username = st.text_input("Username")
                new_password = st.text_input("Password", type="password")
                confirm_password = st.text_input("Confirmar Password", type="password")
                new_role = st.selectbox("Tipo de Utilizador", ["administrador", "gestor"])
                submitted = st.form_submit_button("Adicionar Utilizador", use_container_width=True)
                
                if submitted:
                    if new_password != confirm_password:
                        st.error("As passwords n√£o coincidem!")
                    elif add_user(new_username, new_password, new_role):
                        st.success("Utilizador adicionado com sucesso!")
                        st.session_state.refresh_needed = True
                    else:
                        st.error("Erro ao adicionar utilizador. O username pode j√° existir.")
        
        # Listar e gerir usu√°rios
        st.subheader("Utilizadores Existentes")
        users = list_users()
        
        if users:
            for user in users:
                user_id, username, role = user
                
                # Verificar se este usu√°rio est√° sendo editado
                editing = st.session_state.editing_users.get(user_id, False)
                
                if editing:
                    # Modo de edi√ß√£o
                    with st.form(key=f"edit_form_{user_id}"):
                        col1, col2, col3, col4 = st.columns([3, 2, 1, 1])
                        
                        with col1:
                            new_username = st.text_input("Username", value=username, key=f"username_{user_id}")
                        with col2:
                            new_role = st.selectbox(
                                "Tipo de Utilizador", 
                                ["administrador", "gestor"], 
                                index=0 if role == "administrador" else 1,
                                key=f"role_{user_id}"
                            )
                        with col3:
                            # Checkbox para alterar senha
                            change_password = st.checkbox("Alterar senha", key=f"change_pw_{user_id}")
                        with col4:
                            col4_1, col4_2 = st.columns(2)
                            with col4_1:
                                save_button = st.form_submit_button("üíæ", use_container_width=True, help="Guardar altera√ß√µes")
                            with col4_2:
                                cancel_button = st.form_submit_button("‚ùå", use_container_width=True, help="Cancelar edi√ß√£o")
                        
                        # Campos de senha (apenas mostrados se change_password estiver selecionado)
                        if change_password:
                            col_pw1, col_pw2, col_pw3 = st.columns(3)
                            with col_pw1:
                                current_password = st.text_input("Senha Atual", type="password", key=f"current_pw_{user_id}")
                            with col_pw2:
                                new_password = st.text_input("Nova Senha", type="password", key=f"new_pw_{user_id}")
                            with col_pw3:
                                confirm_new_password = st.text_input("Confirmar Nova Senha", type="password", key=f"confirm_pw_{user_id}")
                        
                        # Processar a√ß√µes do formul√°rio
                        if save_button:
                            # Validar se est√° a alterar a senha
                            password_valid = True
                            password_to_update = None
                            
                            if change_password:
                                # Verificar se a senha atual est√° correta
                                if not check_login(username, current_password):
                                    st.error("Senha atual incorreta!")
                                    password_valid = False
                                elif new_password != confirm_new_password:
                                    st.error("As novas passwords n√£o coincidem!")
                                    password_valid = False
                                elif not new_password:
                                    st.error("A nova senha n√£o pode estar vazia!")
                                    password_valid = False
                                else:
                                    password_to_update = new_password
                            
                            if password_valid:
                                # Preparar par√¢metros para edi√ß√£o
                                if edit_user(user_id, new_username, password_to_update, new_role):
                                    st.success("Utilizador atualizado com sucesso!")
                                    st.session_state.editing_users[user_id] = False
                                    st.session_state.refresh_needed = True
                                else:
                                    st.error("Erro ao atualizar utilizador.")
                        
                        if cancel_button:
                            st.session_state.editing_users[user_id] = False
                            st.session_state.refresh_needed = True
                
                else:
                    # Modo de visualiza√ß√£o normal
                    col1, col2, col3, col4 = st.columns([3, 2, 1, 1])
                    with col1:
                        st.write(f"**{username}**")
                    with col2:
                        st.write(role)
                    with col3:
                        if st.button("‚úèÔ∏è", key=f"edit_{user_id}", use_container_width=True, help="Editar utilizador"):
                            st.session_state.editing_users[user_id] = True
                            st.session_state.refresh_needed = True
                    with col4:
                        if st.button("üóëÔ∏è", key=f"delete_{user_id}", use_container_width=True, help="Eliminar utilizador"):
                            st.session_state.user_to_delete = user_id
                            st.session_state.refresh_needed = True
                
                st.markdown("---")
            
            # Processar elimina√ß√£o de usu√°rio
            if st.session_state.user_to_delete is not None:
                user_id = st.session_state.user_to_delete
                delete_user(user_id)
                st.success(f"Utilizador eliminado com sucesso!")
                st.session_state.user_to_delete = None
                st.session_state.refresh_needed = True
            
        else:
            st.info("N√£o existem utilizadores registados.")
        
        # Atualizar a p√°gina se necess√°rio
        if st.session_state.refresh_needed:
            st.session_state.refresh_needed = False
            st.rerun()
    
    with tab2:
        st.subheader("Estat√≠sticas das Respostas - Protocolo HPO")
        st.info("""
        **Protocolo de Pontua√ß√£o:**
        - Pontua√ß√£o 12 - 14 = Elevado desempenho
        - Pontua√ß√£o 9 - 11 = M√©dio
        - Pontua√ß√£o igual ou inferior a 8 = Oportunidade de melhoria
        """)
        
        df = load_hpo_responses()
        
        if not df.empty:
            stats, performance, overall_performance, _ = calculate_hpo_stats(df)
            
            # Gr√°fico de barras nativo do Streamlit
            st.subheader("Desempenho por Dimens√£o")
            create_hpo_chart(stats)
            
            # Tabela de pontua√ß√µes e desempenho
            st.subheader("Pontua√ß√µes e Desempenho por Dimens√£o")
            display_hpo_stats(stats, performance)
            
            # Desempenho geral
            st.subheader("Desempenho Geral da Organiza√ß√£o")
            st.metric("Classifica√ß√£o Geral", overall_performance)
            
            # Distribui√ß√£o das respostas
            st.subheader("Distribui√ß√£o das Respostas Individuais")
            show_hpo_distribution(df)
            
            # Coment√°rios
            if 'comentario' in df.columns:
                comentarios_df = df[df['comentario'].notna() & (df['comentario'] != '')]
                if not comentarios_df.empty:
                    st.subheader("Coment√°rios dos Participantes")
                    for idx, row in comentarios_df.iterrows():
                        with st.expander(f"Coment√°rio de {row['timestamp']}"):
                            st.markdown(f'<div class="comment-box">{row["comentario"]}</div>', unsafe_allow_html=True)
            else:
                st.info("Coluna de coment√°rios n√£o dispon√≠vel no banco de dados.")
            
        else:
            st.info("Ainda n√£o existem respostas HPO para analisar.")
    
    with tab3:
        st.subheader("Estat√≠sticas das Respostas - Question√°rio de Lideran√ßa")
        
        df = load_lideranca_responses()
        
        if not df.empty:
            question_stats, overall_accuracy = calculate_lideranca_stats(df)
            
            st.subheader("Desempenho Geral")
            display_lideranca_stats(question_stats, overall_accuracy)
            
            # Coment√°rios
            if 'comentario' in df.columns:
                comentarios_df = df[df['comentario'].notna() & (df['comentario'] != '')]
                if not comentarios_df.empty:
                    st.subheader("Coment√°rios dos Participantes")
                    for idx, row in comentarios_df.iterrows():
                        with st.expander(f"Coment√°rio de {row['timestamp']}"):
                            st.markdown(f'<div class="comment-box">{row["comentario"]}</div>', unsafe_allow_html=True)
            
        else:
            st.info("Ainda n√£o existem respostas de Lideran√ßa para analisar.")
    
    with tab4:
        st.subheader("Relat√≥rios de An√°lise")
        
        report_type = st.radio("Selecione o tipo de relat√≥rio:", 
                              ["HPO", "Lideran√ßa"],
                              horizontal=True)
        
        if report_type == "HPO":
            df = load_hpo_responses()
            
            if not df.empty:
                stats, performance, overall_performance, _ = calculate_hpo_stats(df)
                
                st.info("Gere relat√≥rios detalhados com a an√°lise completa dos dados do inqu√©rito HPO.")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("Relat√≥rio em HTML")
                    st.write("Relat√≥rio completo em formato HTML para visualiza√ß√£o no navegador.")
                    
                    html_report = generate_hpo_html_report(stats, performance, overall_performance, df)
                    
                    st.download_button(
                        label="Descarregar Relat√≥rio HPO",
                        data=html_report,
                        file_name="relatorio_hpo.html",
                        mime="text/html",
                        use_container_width=True
                    )
                
                with col2:
                    st.subheader("Relat√≥rio para Impress√£o")
                    st.write("Gere um relat√≥rio otimizado para impress√£o ou convers√£o para PDF.")
                    
                    # Instru√ß√µes para imprimir como PDF
                    st.info("""
                    **Para converter para PDF:**
                    1. Descarregue o relat√≥rio HTML
                    2. Abra-o no seu navegador
                    3. Use a op√ß√£o 'Imprimir' do navegador
                    4. Escolha 'Guardar como PDF'
                    """)
                
                # Visualiza√ß√£o pr√©via do relat√≥rio
                st.subheader("Pr√©-visualiza√ß√£o do Relat√≥rio")
                with st.expander("Clique para ver a pr√©-visualiza√ß√£o do relat√≥rio"):
                    # Mostrar uma vers√£o simplificada do relat√≥rio
                    st.markdown(f"### Relat√≥rio HPO - An√°lise de Desempenho")
                    st.markdown(f"**Gerado em:** {datetime.now().strftime('%d/%m/%Y %H:%M')}")
                    st.markdown(f"**Total de respostas:** {len(df)}")
                    
                    if 'comentario' in df.columns:
                        comentarios_df = df[df['comentario'].notna() & (df['comentario'] != '')]
                        st.markdown(f"**Total de coment√°rios:** {len(comentarios_df)}")
                    
                    st.markdown("#### Desempenho Geral")
                    st.markdown(f"**{overall_performance}**")
                    
                    st.markdown("#### Resultados por Dimens√£o")
                    for dim, avg_total in stats.items():
                        perf_class = ""
                        if performance[dim] == "Elevado desempenho":
                            perf_class = "good-performance"
                        elif performance[dim] == "M√©dio":
                            perf_class = "medium-performance"
                        else:
                            perf_class = "poor-performance"
                        
                        st.markdown(f"- **{dim}**: {avg_total:.2f}/14 - <span class='{perf_class}'>{performance[dim]}</span>", unsafe_allow_html=True)
            
            else:
                st.info("Ainda n√£o existem respostas HPO para gerar relat√≥rios.")
        
        else:  # Lideran√ßa
            df = load_lideranca_responses()
            
            if not df.empty:
                question_stats, overall_accuracy = calculate_lideranca_stats(df)
                
                st.info("Gere relat√≥rios detalhados com a an√°lise completa dos dados do inqu√©rito de Lideran√ßa.")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("Relat√≥rio em HTML")
                    st.write("Relat√≥rio completo em formato HTML para visualiza√ß√£o no navegador.")
                    
                    html_report = generate_lideranca_html_report(question_stats, overall_accuracy, df)
                    
                    st.download_button(
                        label="Descarregar Relat√≥rio de Lideran√ßa",
                        data=html_report,
                        file_name="relatorio_lideranca.html",
                        mime="text/html",
                        use_container_width=True
                    )
                
                with col2:
                    st.subheader("Relat√≥rio para Impress√£o")
                    st.write("Gere um relat√≥rio otimizado para impress√£o ou convers√£o para PDF.")
                    
                    # Instru√ß√µes para imprimir como PDF
                    st.info("""
                    **Para converter para PDF:**
                    1. Descarregue o relat√≥rio HTML
                    2. Abra-o no seu navegador
                    3. Use a op√ß√£o 'Imprimir' do navegador
                    4. Escolha 'Guardar como PDF'
                    """)
                
                # Visualiza√ß√£o pr√©via do relat√≥rio
                st.subheader("Pr√©-visualiza√ß√£o do Relat√≥rio")
                with st.expander("Clique para ver a pr√©-visualiza√ß√£o do relat√≥rio"):
                    # Mostrar uma vers√£o simplificada do relat√≥rio
                    st.markdown(f"### Relat√≥rio de Lideran√ßa - An√°lise de Desempenho")
                    st.markdown(f"**Gerado em:** {datetime.now().strftime('%d/%m/%Y %H:%M')}")
                    st.markdown(f"**Total de respostas:** {len(df)}")
                    
                    if 'comentario' in df.columns:
                        comentarios_df = df[df['comentario'].notna() & (df['comentario'] != '')]
                        st.markdown(f"**Total de coment√°rios:** {len(comentarios_df)}")
                    
                    st.markdown("#### Desempenho Geral")
                    st.markdown(f"**{overall_accuracy:.1f}% de acerto**")
                    
                    st.markdown("#### Resultados por Quest√£o")
                    for q, stats in question_stats.items():
                        st.markdown(f"- **Quest√£o {q}**: {stats['corretas']}/{stats['total']} ({stats['acuracia']:.1f}%)")
            
            else:
                st.info("Ainda n√£o existem respostas de Lideran√ßa para gerar relat√≥rios.")
    
    with tab5:
        st.subheader("Manuten√ß√£o do Sistema")
        
        st.warning("‚ö†Ô∏è **Zona de Opera√ß√µes Cr√≠ticas**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.info("**Reset Completo do Sistema**")
            st.write("Esta opera√ß√£o ir√° apagar permanentemente TODAS as respostas dos question√°rios e reiniciar o sistema.")
            st.error("**ATEN√á√ÉO:** Esta a√ß√£o n√£o pode ser desfeita!")
            
            # Usar uma vari√°vel de sess√£o para controlar o estado de confirma√ß√£o
            if 'reset_confirmed' not in st.session_state:
                st.session_state.reset_confirmed = False
            
            if not st.session_state.reset_confirmed:
                # Primeira etapa - pedir confirma√ß√£o
                if st.button("üîÑ Iniciar Reset do Sistema", key="start_reset", use_container_width=True):
                    st.session_state.reset_confirmed = True
                    st.rerun()
            else:
                # Segunda etapa - confirma√ß√µes finais
                st.warning("Tem a certeza absoluta que deseja apagar TODOS os dados?")
                confirm1 = st.checkbox("Confirmo que compreendo que todos os dados ser√£o PERDIDOS")
                confirm2 = st.checkbox("Confirmo que desejo prosseguir com o reset completo")
                
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("‚úÖ Confirmar Reset", key="confirm_reset", use_container_width=True, disabled=not (confirm1 and confirm2)):
                        if reset_entire_system():
                            st.success("Sistema resetado com sucesso! Todos os dados foram apagados.")
                            st.session_state.reset_confirmed = False
                            st.rerun()
                        else:
                            st.error("Erro ao resetar o sistema.")
                
                with col2:
                    if st.button("‚ùå Cancelar", key="cancel_reset", use_container_width=True):
                        st.session_state.reset_confirmed = False
                        st.rerun()
        
        with col2:
            st.info("**Estat√≠sticas do Banco de Dados**")
            hpo_df = load_hpo_responses()
            lideranca_df = load_lideranca_responses()
            
            st.write(f"Total de respostas HPO: {len(hpo_df)}")
            st.write(f"Total de respostas Lideran√ßa: {len(lideranca_df)}")
            
            if not hpo_df.empty:
                st.write(f"Primeira resposta HPO: {hpo_df['timestamp'].min()}")
                st.write(f"√öltima resposta HPO: {hpo_df['timestamp'].max()}")
            
            if not lideranca_df.empty:
                st.write(f"Primeira resposta Lideran√ßa: {lideranca_df['timestamp'].min()}")
                st.write(f"√öltima resposta Lideran√ßa: {lideranca_df['timestamp'].max()}")

# P√°gina principal
def main():
    if 'logged_in' not in st.session_state:
        st.session_state.logged_in = False
        st.session_state.role = None
        st.session_state.form_type = None
        st.session_state.submitted = False
    
    if not st.session_state.logged_in:
        login_page()
    else:
        # Bot√£o de logout
        if st.sidebar.button("Logout", use_container_width=True):
            st.session_state.logged_in = False
            st.session_state.role = None
            st.session_state.form_type = None
            st.session_state.submitted = False
            st.rerun()
        
        st.sidebar.write(f"Utilizador: {st.session_state.role}")
        
        if st.session_state.role == "trabalhador":
            if st.session_state.form_type is None:
                form_selection_page()
            elif st.session_state.form_type == "hpo":
                survey_hpo_page()
            elif st.session_state.form_type == "lideranca":
                survey_lideranca_page()
        elif st.session_state.role == "administrador":
            admin_page()
        elif st.session_state.role == "gestor":
            manager_page()

if __name__ == "__main__":
    # Inicializar banco de dados
    init_db()
    main()